import api from "../interceptors/api";
import storageService from "../services/storageService";

/**
 * Utilitaires pour tester le syst√®me de refresh token
 */
export class TokenTestUtils {
  /**
   * Teste la fonctionnalit√© de refresh token
   */
  static async testTokenRefresh(): Promise<void> {
    try {
      console.log("üîÑ Test du refresh token...");
      
      // V√©rifier que nous avons un refresh token
      const refreshToken = await storageService.getRefreshToken();
      if (!refreshToken) {
        console.error("‚ùå Aucun refresh token trouv√©");
        return;
      }
      
      console.log("‚úÖ Refresh token trouv√©");
      
      // Faire un appel API prot√©g√© pour d√©clencher le refresh si n√©cessaire
      const response = await api.get("/users/profile");
      console.log("‚úÖ Appel API r√©ussi:", response.status);
      
    } catch (error: any) {
      console.error("‚ùå Erreur lors du test de refresh:", error);
    }
  }

  /**
   * Affiche les informations de debug sur les tokens
   */
  static async debugTokens(): Promise<void> {
    try {
      const accessToken = await storageService.getAccessToken();
      const refreshToken = await storageService.getRefreshToken();
      
      console.log("üîç Debug des tokens:");
      console.log("Access token:", accessToken ? "‚úÖ Pr√©sent" : "‚ùå Absent");
      console.log("Refresh token:", refreshToken ? "‚úÖ Pr√©sent" : "‚ùå Absent");
      
      if (accessToken) {
        // D√©coder le token pour voir son expiration (sans v√©rification)
        try {
          const payload = JSON.parse(atob(accessToken.split('.')[1]));
          const exp = new Date(payload.exp * 1000);
          const now = new Date();
          
          console.log("Expiration du token:", exp.toISOString());
          console.log("Temps restant:", Math.round((exp.getTime() - now.getTime()) / 1000), "secondes");
          console.log("Token expir√©:", exp < now ? "üî¥ OUI" : "üü¢ NON");
        } catch (decodeError) {
          console.error("Erreur lors du d√©codage du token:", decodeError);
        }
      }
      
    } catch (error) {
      console.error("Erreur lors du debug des tokens:", error);
    }
  }

  /**
   * Force l'expiration du token d'acc√®s pour tester le refresh
   */
  static async forceTokenExpiration(): Promise<void> {
    try {
      // Sauvegarder un token invalide pour forcer le refresh
      await storageService.setAccessToken("invalid_token_for_testing");
      console.log("üß™ Token d'acc√®s forc√© √† expirer pour test");
    } catch (error) {
      console.error("Erreur lors de la force d'expiration:", error);
    }
  }

  /**
   * Teste sp√©cifiquement la diff√©renciation entre erreurs d'autorisation et expiration
   */
  static async testAuthorizationVsExpiration(): Promise<void> {
    console.log("üß™ Test de diff√©renciation des erreurs 401...");

    try {
      // 1. Test avec un token expir√©
      await this.forceTokenExpiration();
      console.log("üìã Test 1: Token expir√© (devrait d√©clencher refresh)");
      
      try {
        await api.get("/users/profile");
        console.log("‚úÖ Token expir√© g√©r√© correctement avec refresh");
      } catch (error: any) {
        console.log("‚ùå √âchec du refresh pour token expir√©:", error.response?.data?.message);
      }

      // 2. Attendre un peu pour laisser le refresh se terminer
      await new Promise(resolve => setTimeout(resolve, 1000));

      // 3. Test avec un appel vers une ressource qui pourrait retourner 401 pour permissions
      // (√† adapter selon vos endpoints sp√©cifiques)
      console.log("üìã Test 2: Appel vers ressource avec potentiel 401 de permission");
      
      try {
        // Remplacez par un endpoint qui peut retourner 401 pour permissions insuffisantes
        await api.get("/admin/users"); // Exemple d'endpoint admin
        console.log("‚úÖ Acc√®s autoris√© ou endpoint non prot√©g√©");
      } catch (error: any) {
        const message = error.response?.data?.message;
        console.log(`üìù Erreur 401 re√ßue: "${message}"`);
        
        if (error.response?.status === 401) {
          // V√©rifier si c'est une erreur de permission (ne devrait pas d√©clencher refresh)
          console.log("üîç Type d'erreur 401 d√©tect√©:", 
            message?.includes("autoris√©") || message?.includes("permission") 
              ? "‚ùå Permission refus√©e (correct - pas de refresh)"
              : "üîÑ Expiration de token (devrait d√©clencher refresh)"
          );
        }
      }

    } catch (error) {
      console.error("Erreur durant le test:", error);
    }
  }

  /**
   * Affiche tous les messages d'erreur captur√©s par l'intercepteur
   */
  static debugInterceptorMessages(): void {
    console.log("üìã Messages d'erreur qui d√©clenchent un refresh:");
    
    const TOKEN_EXPIRATION_MESSAGES = [
      "Le token d'acc√®s est manquant ou mal format√©",
      "Le token d'acc√®s est manquant", 
      "Token invalide",
      "Cet utilisateur n'existe pas, veuillez vous re-connecter. Votre session a √©t√© r√©voqu√©e.",
      "Le token a expir√©. Veuillez vous reconnecter.",
      "Le token est invalide. Veuillez v√©rifier votre authentification.",
      "L'utilisateur actuellement connect√© n'existe pas, veuillez vous reconnecter",
      "Token invalide ou expir√©",
      "Utilisateur non trouv√©",
      "√âchec du rafra√Æchissement du token",
      "Authentification requise",
      "Non autoris√© - Token invalide",
      "Non autoris√© - Token manquant",
      "jwt expired",
      "jwt malformed", 
      "invalid token",
      "token expired"
    ];

    TOKEN_EXPIRATION_MESSAGES.forEach((msg, index) => {
      console.log(`${index + 1}. "${msg}"`);
    });

    console.log("\nüìã Exemples de messages qui NE d√©clenchent PAS de refresh:");
    console.log('1. "Vous n\'√™tes pas autoris√© √† acc√©der aux ressources de cet utilisateur"');
    console.log('2. "Acc√®s refus√©"');
    console.log('3. "Permissions insuffisantes"');
    console.log('4. "Plateforme non support√©e"');
  }

  /**
   * Test complet du syst√®me de refresh
   */
  static async runFullTest(): Promise<void> {
    console.log("üöÄ === Test complet du syst√®me de refresh token ===\n");
    
    await this.debugTokens();
    console.log("\n");
    
    this.debugInterceptorMessages();
    console.log("\n");
    
    await this.testAuthorizationVsExpiration();
    console.log("\n");
    
    await this.testTokenRefresh();
    
    console.log("\n‚úÖ === Test complet termin√© ===");
  }
}

// Fonction globale pour faciliter les tests en dev
if (__DEV__) {
  (global as any).TokenTestUtils = TokenTestUtils;
} 